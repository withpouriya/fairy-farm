"""
This type stub file was generated by pyright.
"""

import pygame
from typing import Dict, Iterable, List, Optional, Sequence, Tuple, Union
from xml.etree import ElementTree

"""
Copyright (C) 2012-2023, Leif Theden <leif.theden@gmail.com>

This file is part of pytmx.

pytmx is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as
published by the Free Software Foundation, either version 3 of the
License, or (at your option) any later version.

pytmx is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with pytmx.  If not, see <https://www.gnu.org/licenses/>.

"""
__all__ = ("TileFlags", "TiledElement", "TiledImageLayer", "TiledMap", "TiledObject", "TiledObjectGroup", "TiledTileLayer", "TiledClassType", "TiledTileset", "convert_to_bool", "resolve_to_class", "parse_properties")
logger = ...
TRANS_FLIPX = ...
TRANS_FLIPY = ...
TRANS_ROT = ...
GID_TRANS_FLIPX = ...
GID_TRANS_FLIPY = ...
GID_TRANS_ROT = ...
GID_MASK = ...
duplicate_name_fmt = ...
flag_names = ...
AnimationFrame = ...
Point = ...
TileFlags = ...
empty_flags = ...
ColorLike = Union[Tuple[int, int, int, int], Tuple[int, int, int], int, str]
MapPoint = Tuple[int, int, int]
if pygame:
    PointLike = ...
else:
    PointLike = ...
def default_image_loader(filename: str, flags, **kwargs): # -> Callable[..., tuple[str, Any | None, Any | None]]:
    """This default image loader just returns filename, rect, and any flags.
    Suitable for loading a map without the images.

    Args:
        filename (str): The file's name.
        flags (???): ???
        **kwargs: Additional kwargs.

    Returns:
        Tuple[str, ???, ???]: A tuple of the file name, rect, and flags.

    """
    ...

def decode_gid(raw_gid: int) -> Tuple[int, TileFlags]:
    """Decode a GID from TMX data.

    Args:
        raw_gid (int): GID, as reported by Tiled.

    Returns:
        Tuple[int, TileFlags]: Tuple of the GID after rotation flags, and TileFlags object

    """
    ...

def reshape_data(gids: List[int], width: int) -> List[List[int]]:
    """Change 1D list to 2d list

    Args:
        gids (List[int]): List of gid ints.
        width (int): Width of each row.

    Returns:
        List[List[int]]: 2D nested list object.

    """
    ...

def unpack_gids(text: str, encoding: Optional[str] = ..., compression: Optional[str] = ...) -> List[int]:
    """Return all gids from encoded/compressed layer data

    Args:
        text (str): Layer data in text format.
        encoding (Optional[str]): Encoding used.
        compression (Optional[str]): Compression used.

    Returns:
        List[int]: List of all the GIDs in the layer.

    """
    ...

def convert_to_bool(value: str) -> bool:
    """Convert a few common variations of "true" and "false" to boolean

    Args:
        value (str): String to test.

    Raises:
        ValueError: If `value` cannot be converted to a boolean.

    Returns:
        bool: The converted boolean.

    """
    ...

def resolve_to_class(value: str, custom_types: dict) -> TiledClassType:
    """Converts tiled custom types to a python class.

    Args:
        value (str): name of the class.
        custom_types (dict): A dictionary with the custom types created by users.

    Raises:
        ValueError: if `value` cannot be converted to a class.

    Returns:
        TiledClassType: The converted python class type.

    """
    ...

def rotate(points: Sequence[Point], origin: Point, angle: Union[int, float]) -> List[Point]:
    """Rotate a sequence of points around an axis.

    Args:
        points (Sequence[Point]): sequence of points.
        origin (Point): point where points are rotated around.
        angle (Union[int, float]): angle in degrees.

    Returns:
        List[Point]: List of rotated points.

    """
    ...

types = ...
prop_type = ...
def parse_properties(node: ElementTree.Element, customs: dict = ...) -> Dict:
    """Parse a Tiled xml node and return a dict.

    Args:
        node (ElementTree.Element): Etree element to inspect.

    Returns:
        Dict: Dictionary of the properties, as set in the Tiled editor.

    """
    ...

class TiledElement:
    """Base class for all pytmx types."""
    allow_duplicate_names = ...
    def __init__(self) -> None:
        ...
    
    @classmethod
    def from_xml_string(cls, xml_string: str) -> TiledElement:
        """Return a TiledElement object from a xml string.

        Args:
            xml_string (str): String containing xml data.

        Returns:
            TiledElement: The TiledElement from the xml string.

        """
        ...
    
    def __getattr__(self, item):
        ...
    
    def __repr__(self): # -> str:
        ...
    


class TiledClassType:
    """Contains custom Tiled types."""
    def __init__(self, name: str, members: List[dict]) -> None:
        """Creates the TiledClassType.

        Args:
            name (str): The name of the class type.
            members (List[dict]): The members of the class type.

        """
        ...
    


class TiledMap(TiledElement):
    """Contains the layers, objects, and images from a Tiled .tmx map."""
    def __init__(self, filename: Optional[str] = ..., custom_property_filename: Optional[List[str]] = ..., image_loader=..., **kwargs) -> None:
        """Load new Tiled map from a .tmx file.

        Args:
            filename (Optional[str]): Filename of tiled map to load.
            image_loader (Optional[List[str]]): Function that will load images (see below).
            optional_gids (???): Load specific tile image GID, even if never used.
            invert_y (bool): Invert the y axis.
            load_all_tiles (bool): Load all tile images, even if never used.
            allow_duplicate_names (bool): Allow duplicates in objects' metadata.

        """
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def __iter__(self): # -> chain[TiledObject]:
        ...
    
    def parse_json(self, data: dict) -> None:
        """Parse custom data types from a JSON object

        Args:
            data (dict): Dictionary from JSON object to parse

        """
        ...
    
    def parse_xml(self, node: ElementTree.Element) -> None:
        """Parse a map from ElementTree xml node.

        Args:
            node (ElementTree.Element): ElementTree xml node to parse.

        """
        ...
    
    def reload_images(self) -> None:
        """Load or reload the map images from disk.

        This method will use the image loader passed in the constructor
        to do the loading or will use a generic default, in which case no
        images will be loaded.

        """
        ...
    
    def get_tile_image(self, x: int, y: int, layer: int): # -> None:
        """Return the tile image for this location.

        Args:
            x (int): The x coordinate.
            y (int): The y coordinate.
            layer (int): The layer's number.

        Returns:
            ???: the image object type will depend on the loader (ie. pygame surface).

        Raises:
            TypeError: if coordinates are not integers.
            ValueError: if the coordinates are out of bounds, or GID not found.

        """
        ...
    
    def get_tile_image_by_gid(self, gid: int): # -> None:
        """Return the tile image for this location.

        Args:
            gid (int): GID of image.

        Returns:
            ???: The image object type will depend on the loader (ie. pygame.Surface).

        Raises:
            TypeError: if `gid` is not an integer.
            ValueError: if there is no image for this GID.

        """
        ...
    
    def get_tile_gid(self, x: int, y: int, layer: int) -> int:
        """Return the tile image GID for this location.

        Args:
            x (int): The x coordinate.
            y (int): The y coordinate.
            layer (int): The layer's number.

        Returns:
            ???: The image object type will depend on the loader (ie. pygame.Surface).

        Raises:
            ValueError: If coordinates are out of bounds.

        """
        ...
    
    def get_tile_properties(self, x: int, y: int, layer: int) -> Optional[Dict]:
        """Return the tile image GID for this location.

        Args:
            x (int): The x coordinate.
            y (int): The y coordinate.
            layer (int): The layer number.

        Returns:
            Optional[dict]: Dictionary of the properties for tile in this location or None.

        Raises:
            ValueError: If coordinates are out of bounds

        """
        ...
    
    def get_tile_locations_by_gid(self, gid: int) -> Iterable[MapPoint]:
        """Search map for tile locations by the GID.

        Note: Not a fast operation.  Cache results if used often.

        Args:
            gid (int): GID to be searched for.

        Returns:
            Iterable[MapPoint]: (int, int, int) tuples, where the layer is index of the visible tile layers.

        """
        ...
    
    def get_tile_properties_by_gid(self, gid: int) -> Optional[Dict]:
        """Get the tile properties of a tile GID.

        Args:
            gid (int): GID.

        Returns:
            Optional[dict]: Dictionary of properties for GID, or None.

        """
        ...
    
    def set_tile_properties(self, gid: int, properties: dict) -> None:
        """Set the tile properties of a tile GID.

        Args:
            gid (int): GID.
            properties (dict): Python dictionary of properties for GID.

        """
        ...
    
    def get_tile_properties_by_layer(self, layer: int): # -> Generator[tuple[Any, Any], Any, None]:
        """Get the tile properties of each GID in layer.

        Args:
            layer (int): The layer number.

        Returns:
            ???: ???

        """
        ...
    
    def add_layer(self, layer: Union[TiledTileLayer, TiledImageLayer, TiledGroupLayer, TiledObjectGroup]) -> None:
        """Add a layer to the map.

        Args:
            layer (Union[TiledTileLayer, TiledImageLayer, TiledGroupLayer, TiledObjectGroup]): The layer.

        """
        ...
    
    def add_tileset(self, tileset: TiledTileset) -> None:
        """Add a tileset to the map."""
        ...
    
    def get_layer_by_name(self, name: str) -> int:
        """Return a layer by name.

        Args:
            name (str): The layer's name. Case-sensitive!

        Returns:
            int: The layer number.

        Raises:
            ValueError: if layer by name does not exist

        """
        ...
    
    def get_object_by_id(self, obj_id: int) -> TiledObject:
        """Find an object by the object id.

        Args:
            obj_id (int): ID of the object, from Tiled.

        Returns:
            TiledObject: The found object.

        """
        ...
    
    def get_object_by_name(self, name: str) -> TiledObject:
        """Find an object by name, case-sensitive.

        Args:
            name (str): The object's name.

        Returns:
            TiledObject: The found object.

        """
        ...
    
    def get_tileset_from_gid(self, gid: int) -> TiledTileset:
        """Return tileset that owns the gid.

        Note: this is a slow operation, so if you are expecting to do this
              often, it would be worthwhile to cache the results of this.

        Args:
            gid (int): GID of tile image.

        Returns:
            TiledTileset: The tileset that owns the GID.

        Raises:
            ValueError: if the tileset for gid is not found

        """
        ...
    
    def get_tile_colliders(self) -> Iterable[Tuple[int, List[Dict]]]:
        """Return iterator of (gid, dict) pairs of tiles with colliders.

        Returns:
            Iterable[Tuple[int, List[Dict]]]: The tile colliders.

        """
        ...
    
    @property
    def objectgroups(self) -> Iterable[TiledObjectGroup]:
        """Returns iterator of all object groups.

        Returns:
            Iterable[TiledObjectGroup]: ???.

        """
        ...
    
    @property
    def objects(self) -> Iterable[TiledObject]:
        """Returns iterator of all the objects associated with the map.

        Returns:
            Iterable[TiledObject]: All objects associated with the map.

        """
        ...
    
    @property
    def visible_layers(self): # -> Generator[Any, None, None]:
        """Returns iterator of Layer objects that are set "visible".

        Returns:
            ???: Iterator of Layer objects that are set "visible".

        """
        ...
    
    @property
    def visible_tile_layers(self) -> Iterable[TiledTileLayer]:
        """Return iterator of layer indexes that are set "visible".

        Returns:
            Iterable[TiledTileLayer]: A list of layer indexes.

        """
        ...
    
    @property
    def visible_object_groups(self) -> Iterable[TiledObjectGroup]:
        """Return iterator of object group indexes that are set "visible".

        Returns:
            Iterable[TiledObjectGroup]: A list of object group indexes that are set to "visible".

        """
        ...
    
    def register_gid(self, tiled_gid: int, flags: Optional[TileFlags] = ...) -> int:
        """Used to manage the mapping of GIDs between .tmx and pytmx.

        Args:
            tiled_gid (int): GID that is found in TMX data.
            flags (???): TileFlags.

        Returns:
            int: New or existing GID for pytmx use.

        """
        ...
    
    def register_gid_check_flags(self, tiled_gid: int) -> int:
        """Used to manage the mapping of GIDs between .tmx and pytmx.

        Checks the GID for rotation/flip flags

        Args:
            tiled_gid (int): GID that is found in TMX data.

        Returns:
            int: New or existing GID for pytmx use.

        """
        ...
    
    def map_gid(self, tiled_gid: int) -> Optional[List[int]]:
        """Used to lookup a GID read from a TMX file's data.

        Args:
            tiled_gid (int): GID. that is found in the .tmx file data.

        Returns:
            Optional[List[int]]: ???

        """
        ...
    
    def map_gid2(self, tiled_gid: int) -> List[Tuple[int, Optional[int]]]:
        """WIP.  need to refactor the gid code"""
        ...
    


class TiledTileset(TiledElement):
    """Represents a Tiled Tileset

    External tilesets are supported.  GID/ID's from Tiled are not
    guaranteed to be the same after loaded.

    """
    def __init__(self, parent, node) -> None:
        """Represents a Tiled Tileset

        Args:
            parent (???): ???.
            node (ElementTree.Element): ???.

        """
        ...
    
    def parse_xml(self, node: ElementTree.Element) -> TiledTileset:
        """Parse a Tileset from ElementTree xml element.

        A bit of mangling is done here so that tilesets that have
        external TSX files appear the same as those that don't.

        Args:
            node (ElementTree.Element): Node to parse.

        Returns:
            TiledTileset:

        """
        ...
    


class TiledGroupLayer(TiledElement):
    def __init__(self, parent, node: ElementTree.Element) -> None:
        """

        Args:
            parent (???): ???.
            node (ElementTree.Element): ???.

        """
        ...
    
    def parse_xml(self, node) -> TiledGroupLayer:
        """
        Parse a TiledGroup layer from ElementTree xml node.

        Args:
            node (ElementTree.Element): Node to parse.

        Returns:
            TiledGroupLayer: The parsed TiledGroup layer.

        """
        ...
    


class TiledTileLayer(TiledElement):
    """Represents a TileLayer.

    To just get the tile images, use TiledTileLayer.tiles().

    """
    def __init__(self, parent, node) -> None:
        ...
    
    def __iter__(self): # -> Iterable[Tuple[int, int, int]]:
        ...
    
    def iter_data(self) -> Iterable[Tuple[int, int, int]]:
        """Yields X, Y, GID tuples for each tile in the layer.

        Returns:
            Iterable[Tuple[int, int, int]]: Iterator of X, Y, GID tuples for each tile in the layer.

        """
        ...
    
    def tiles(self): # -> Generator[tuple[int, int, Any], Any, None]:
        """Yields X, Y, Image tuples for each tile in the layer.

        Yields:
            ???: Iterator of X, Y, Image tuples for each tile in the layer

        """
        ...
    
    def parse_xml(self, node: ElementTree.Element) -> TiledTileLayer:
        """Parse a Tile Layer from ElementTree xml node.

        Args:
            node (ElementTree.Element): Node to parse.

        Returns:
            TiledTileLayer: The parsed tile layer.

        """
        ...
    


class TiledObjectGroup(TiledElement, list):
    """Represents a Tiled ObjectGroup

    Supports any operation of a normal list.

    """
    def __init__(self, parent, node, customs) -> None:
        ...
    
    def parse_xml(self, node: ElementTree.Element) -> TiledObjectGroup:
        """Parse an Object Group from ElementTree xml node

        Args:
            node (ElementTree.Element): Node to parse.

        """
        ...
    


class TiledObject(TiledElement):
    """Represents any Tiled Object.

    Supported types: Box, Ellipse, Tile Object, Polyline, Polygon.

    """
    def __init__(self, parent, node, custom_types) -> None:
        ...
    
    @property
    def image(self): # -> None:
        """Image for the object, if assigned.

        Returns:
            ???: The image object type will depend on the loader (ie. pygame.Surface).

        """
        ...
    
    def parse_xml(self, node: ElementTree.Element) -> TiledObject:
        """Parse an Object from ElementTree xml node.

        Args:
            node (ElementTree.Element): The node to be parsed.

        Returns:
            TiledObject: The parsed xml node.

        """
        ...
    
    def apply_transformations(self) -> List[Point]:
        """Return all points for object, taking in account rotation."""
        ...
    
    @property
    def as_points(self) -> List[Point]:
        ...
    


class TiledImageLayer(TiledElement):
    """Represents Tiled Image Layer.

    The image associated with this layer will be loaded and assigned a GID.

    """
    def __init__(self, parent, node: ElementTree.Element) -> None:
        ...
    
    @property
    def image(self): # -> None:
        """Image for the object, if assigned.

        Returns:
            ???: the image object type will depend on the loader (ie. pygame.Surface).

        """
        ...
    
    def parse_xml(self, node: ElementTree.Element): # -> Self:
        """Parse an Image Layer from ElementTree xml node."""
        ...
    


class TiledProperty(TiledElement):
    """Represents Tiled Property."""
    def __init__(self, parent, node: ElementTree.Element) -> None:
        ...
    
    def parse_xml(self, node: ElementTree.Element) -> None:
        ...
    


